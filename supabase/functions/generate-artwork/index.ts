import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      {
        global: {
          headers: { Authorization: req.headers.get('Authorization')! },
        },
      }
    );

    const { prompt, title, photoUrls, artStyle, userId, collectionId } = await req.json();

    if (!photoUrls || photoUrls.length < 2 || !userId || !collectionId) {
      throw new Error('At least 2 photo URLs, userId, and collectionId are required');
    }

    console.log('Generating artwork from', photoUrls.length, 'photos with style:', artStyle);
    console.log('Photo URLs:', photoUrls);

    // Validate that photo URLs are accessible
    for (const photoUrl of photoUrls) {
      if (!photoUrl || typeof photoUrl !== 'string') {
        throw new Error(`Invalid photo URL: ${photoUrl}`);
      }
    }

    // Build the AI prompt based on style and user input
    const styleDescriptions: Record<string, string> = {
      impressionist: 'impressionist painting with visible brushstrokes and vibrant light',
      watercolor: 'soft watercolor painting with flowing colors and transparency',
      'oil-painting': 'rich oil painting with thick textures and bold colors',
      'digital-art': 'modern digital art with clean lines and vivid colors',
      abstract: 'abstract composition with geometric shapes and bold patterns',
      photorealistic: 'photorealistic rendering with perfect lighting and detail',
      anime: 'anime art style with expressive features and dramatic composition'
    };

    const styleDesc = styleDescriptions[artStyle] || styleDescriptions.impressionist;
    const fullPrompt = `Please analyze the ${photoUrls.length} travel photos I've provided above and create a beautiful ${styleDesc} that artistically combines and blends ALL visual elements from these photos into a single cohesive artwork.

CRITICAL REQUIREMENTS:
- USE ONLY the visual content from the provided photos - landscapes, buildings, objects, scenery, and any people shown
- If any people appear in the photos, you MUST preserve them EXACTLY as they appear in the original photos
- DO NOT add any people, objects, or elements that are not visible in the original photos
- DO NOT alter, modify, or change body shapes, facial features, or physical appearance of any people
- Keep all people recognizable and true to their original appearance with accurate proportions and features
- Incorporate the actual colors, lighting, and compositional elements from the source photos
- Blend the scenes, architecture, landscapes, and other visual elements from all photos harmoniously

ARTISTIC GOAL: ${prompt || 'Make it visually stunning and harmonious while staying true to the original photo content.'}`;

    // Call Lovable AI Gateway to generate image
    const lovableApiKey = Deno.env.get('LOVABLE_API_KEY');
    if (!lovableApiKey) {
      throw new Error('LOVABLE_API_KEY not configured');
    }

    // Prepare the message content with both images and text
    const messageContent = [
      // Add all the source photos first
      ...photoUrls.map((url: string) => ({
        type: 'image_url',
        image_url: {
          url: url,
          detail: 'high'
        }
      })),
      // Then add the text prompt
      {
        type: 'text',
        text: fullPrompt
      }
    ];

    const aiResponse = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${lovableApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash-image',
        messages: [
          {
            role: 'user',
            content: messageContent
          }
        ],
        modalities: ['image', 'text']
      })
    });

    if (!aiResponse.ok) {
      const errorText = await aiResponse.text();
      console.error('AI Gateway error:', errorText);
      throw new Error(`AI Gateway error: ${errorText}`);
    }

    const aiData = await aiResponse.json();
    console.log('AI Response structure:', JSON.stringify(aiData, null, 2));
    const generatedImageUrl = aiData.choices?.[0]?.message?.images?.[0]?.image_url?.url;

    if (!generatedImageUrl) {
      throw new Error('No image generated by AI');
    }

    console.log('Generated artwork image');

    // Upload the generated image to Supabase storage
    const base64Data = generatedImageUrl.replace(/^data:image\/\w+;base64,/, '');
    const buffer = Uint8Array.from(atob(base64Data), c => c.codePointAt(0) || 0);

    const fileName = `artwork-${Date.now()}.png`;
    const { error: uploadError } = await supabaseClient.storage
      .from('generated-artworks')
      .upload(fileName, buffer, {
        contentType: 'image/png',
        upsert: false
      });

    if (uploadError) {
      console.error('Upload error:', uploadError);
      throw new Error(`Upload error: ${uploadError.message}`);
    }

    // Get public URL
    const { data: urlData } = supabaseClient.storage
      .from('generated-artworks')
      .getPublicUrl(fileName);

    const artworkUrl = urlData.publicUrl;
    console.log('Uploaded artwork to:', artworkUrl);

    // Store the generated artwork in the database
    const { data: artwork, error } = await supabaseClient
      .from('generated_artworks')
      .insert({
        user_id: userId,
        collection_id: collectionId,
        artwork_url: artworkUrl,
        title: title,
        style_settings: { prompt, artStyle, photoCount: photoUrls.length },
        prompt_used: null // Do not store the prompt text
      })
      .select()
      .single();

    if (error) {
      console.error('Database error:', error);
      throw new Error(`Database error: ${error.message}`);
    }

    console.log('Artwork saved to database:', artwork.id);

    return new Response(
      JSON.stringify({
        artwork,
        artwork_url: artworkUrl
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  } catch (error) {
    console.error('Error in generate-artwork function:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
    return new Response(
      JSON.stringify({
        error: errorMessage,
        details: 'Error generating artwork description'
      }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});